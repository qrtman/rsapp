import os
import json
import requests
import psycopg2
from io import BytesIO

from flask import Flask, request, jsonify
from dotenv import load_dotenv

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
app = Flask(__name__)
load_dotenv()

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")
MANAGER_CHAT_ID = os.environ.get("MANAGER_CHAT_ID")
MANAGER_PASSWORD = os.environ.get("MANAGER_PASSWORD")

if not all([TELEGRAM_BOT_TOKEN, DATABASE_URL, MANAGER_CHAT_ID, MANAGER_PASSWORD]):
    raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ Render.")

# --- API URL-–∞–¥—Ä–µ—Å–∞ Telegram ---
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
# URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
TELEGRAM_FILE_URL = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}"

manager_sessions = {}

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = psycopg2.connect(DATABASE_URL)
    return conn

def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS tg_clients (
                id SERIAL PRIMARY KEY, chat_id VARCHAR(50) UNIQUE NOT NULL, name VARCHAR(100),
                status VARCHAR(50) DEFAULT 'new', managed_by_manager BOOLEAN DEFAULT FALSE,
                dialog_step VARCHAR(50) DEFAULT 'start', budget VARCHAR(100), car_type VARCHAR(100)
            );
        ''')
        cur.execute('''
            CREATE TABLE IF NOT EXISTS tg_messages (
                id SERIAL PRIMARY KEY, client_id INTEGER REFERENCES tg_clients(id),
                message_text TEXT, is_voice BOOLEAN DEFAULT FALSE,
                sender_is_bot BOOLEAN, timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        conn.commit()
        cur.close()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° TELEGRAM API ---

def send_telegram_message(text, chat_id, keyboard=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–æ–∂–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    if keyboard:
        payload["reply_markup"] = json.dumps(keyboard)
    
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_voice_message(voice_content, chat_id, caption=""):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    url = f"{TELEGRAM_API_URL}/sendVoice"
    files = {'voice': ('voice_message.ogg', voice_content, 'audio/ogg')}
    data = {'chat_id': chat_id, 'caption': caption}
    try:
        response = requests.post(url, files=files, data=data)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_file_content(file_id):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª (–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram."""
    try:
        url = f"{TELEGRAM_API_URL}/getFile?file_id={file_id}"
        response = requests.get(url)
        response.raise_for_status()
        file_path = response.json()['result']['file_path']
        
        download_url = f"{TELEGRAM_FILE_URL}/{file_path}"
        file_response = requests.get(download_url)
        file_response.raise_for_status()
        return file_response.content
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

def process_manager_command(message_body, chat_id_str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    conn = get_db_connection()
    cur = conn.cursor()

    if message_body.lower().startswith('/login '):
        pwd = message_body.split(' ', 1)[1]
        if pwd == MANAGER_PASSWORD:
            manager_sessions[chat_id_str] = {"logged_in": True}
            send_telegram_message("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n–ö–æ–º–∞–Ω–¥—ã:\n`/list` - —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n`/takeover <id>` - –≤–∑—è—Ç—å —á–∞—Ç\n`/history <id>` - –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", chat_id_str)
        else:
            send_telegram_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", chat_id_str)
        return

    if not manager_sessions.get(chat_id_str, {}).get("logged_in"):
        send_telegram_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ: `/login <–ø–∞—Ä–æ–ª—å>`", chat_id_str)
        return

    if message_body.lower() == '/list':
        cur.execute("SELECT name, chat_id, status FROM tg_clients ORDER BY id DESC LIMIT 10;")
        clients = cur.fetchall()
        reply = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n" if clients else "–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ—Ç."
        for client in clients:
            reply += f"üë§ *{client[0]}* | –°—Ç–∞—Ç—É—Å: {client[2]}\n`{client[1]}`\n\n"
        send_telegram_message(reply, chat_id_str)

    elif message_body.lower().startswith('/takeover '):
        try:
            client_to_manage = message_body.split(' ', 1)[1]
            cur.execute("UPDATE tg_clients SET managed_by_manager = FALSE;") # –°–±—Ä–æ—Å –≤—Å–µ—Ö
            cur.execute("UPDATE tg_clients SET managed_by_manager = TRUE WHERE chat_id = %s RETURNING name;", (client_to_manage,))
            client_name = cur.fetchone()
            if client_name:
                send_telegram_message(f"‚úÖ –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —á–∞—Ç–æ–º —Å {client_name[0]} (`{client_to_manage}`).", chat_id_str)
                send_telegram_message("–ö –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", client_to_manage)
            else:
                send_telegram_message("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id_str)
        except IndexError:
            send_telegram_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/takeover <chat_id>`", chat_id_str)
            
    elif message_body.lower().startswith('/history '):
        try:
            client_chat_id = message_body.split(' ', 1)[1]
            cur.execute("SELECT m.message_text, m.sender_is_bot, m.is_voice FROM tg_messages m JOIN tg_clients c ON m.client_id = c.id WHERE c.chat_id = %s ORDER BY m.timestamp DESC LIMIT 20", (client_chat_id,))
            messages = cur.fetchall()
            if not messages:
                send_telegram_message("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞.", chat_id_str)
                return
            
            history = f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å `{client_chat_id}`:\n" + "-"*20 + "\n"
            for msg in reversed(messages): # reversed —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
                sender = "–ë–æ—Ç" if msg[1] else "–ö–ª–∏–µ–Ω—Ç"
                text = "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]" if msg[2] else msg[0]
                history += f"*{sender}*: {text}\n"
            send_telegram_message(history, chat_id_str)
        except IndexError:
            send_telegram_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/history <chat_id>`", chat_id_str)

    else: # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cur.execute("SELECT chat_id FROM tg_clients WHERE managed_by_manager = TRUE;")
        active_client = cur.fetchone()
        if active_client:
            send_telegram_message(message_body, active_client[0])
        else:
            send_telegram_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/takeover <chat_id>`.", chat_id_str)
    
    conn.commit()
    cur.close()
    conn.close()

def process_client_message(message_body, chat_id_str, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞."""
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT id, dialog_step, managed_by_manager FROM tg_clients WHERE chat_id = %s;", (chat_id_str,))
    client = cur.fetchone()
    if not client:
        cur.execute("INSERT INTO tg_clients (chat_id, name) VALUES (%s, %s) RETURNING id, dialog_step, managed_by_manager;", (chat_id_str, name))
        client = cur.fetchone()
    client_id, dialog_step, managed_by_manager = client

    cur.execute("INSERT INTO tg_messages (client_id, message_text, sender_is_bot) VALUES (%s, %s, FALSE);", (client_id, message_body))

    if managed_by_manager:
        manager_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name} (`{chat_id_str}`):\n\n{message_body}"
        send_telegram_message(manager_message, MANAGER_CHAT_ID)
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º
        user_input = message_body.lower().strip()
        reply_text = ""
        keyboard = None
        
        if dialog_step == 'start':
            reply_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –ö–æ—Ä–µ–∏. –ù–∞—á–Ω–µ–º?"
            keyboard = {"keyboard": [[{"text": "–î–∞"}], [{"text": "–ù–µ—Ç"}]], "one_time_keyboard": True, "resize_keyboard": True}
            cur.execute("UPDATE tg_clients SET dialog_step = 'ask_budget' WHERE id = %s;", (client_id,))
        
        elif dialog_step == 'ask_budget':
            if user_input == '–¥–∞':
                reply_text = "–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25000)"
                cur.execute("UPDATE tg_clients SET dialog_step = 'get_budget' WHERE id = %s;", (client_id,))
            else:
                reply_text = "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ."
                cur.execute("UPDATE tg_clients SET dialog_step = 'start' WHERE id = %s;", (client_id,))
        
        elif dialog_step == 'get_budget':
            if user_input.isdigit():
                reply_text = "–ü—Ä–∏–Ω—è—Ç–æ. –ö–∞–∫–æ–π —Ç–∏–ø –∫—É–∑–æ–≤–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–°–µ–¥–∞–Ω, –ö—Ä–æ—Å—Å–æ–≤–µ—Ä, –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∏ —Ç.–¥.)"
                cur.execute("UPDATE tg_clients SET budget = %s, dialog_step = 'get_car_type' WHERE id = %s;", (user_input, client_id))
            else:
                reply_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏."
        
        elif dialog_step == 'get_car_type':
            cur.execute("SELECT budget FROM tg_clients WHERE id = %s;", (client_id,))
            budget = cur.fetchone()[0]
            reply_text = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω:\n\n*–¢–∏–ø –∞–≤—Ç–æ*: {message_body}\n*–ë—é–¥–∂–µ—Ç*: –¥–æ ${budget}\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
            cur.execute("UPDATE tg_clients SET car_type = %s, dialog_step = 'done', status = 'completed' WHERE id = %s;", (message_body, client_id))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
            manager_notification = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {name} (`{chat_id_str}`)\n–ë—é–¥–∂–µ—Ç: –¥–æ ${budget}\n–¢–∏–ø: {message_body}"
            send_telegram_message(manager_notification, MANAGER_CHAT_ID)

        if reply_text:
            send_telegram_message(reply_text, chat_id_str, keyboard)
            cur.execute("INSERT INTO tg_messages (client_id, message_text, sender_is_bot) VALUES (%s, %s, TRUE);", (client_id, reply_text))

    conn.commit()
    cur.close()
    conn.close()

def process_voice_message(file_id, chat_id_str, name):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    conn = get_db_connection()
    cur = conn.cursor()

    cur.execute("SELECT id, managed_by_manager FROM tg_clients WHERE chat_id = %s;", (chat_id_str,))
    client = cur.fetchone()
    if not client:
        cur.execute("INSERT INTO tg_clients (chat_id, name) VALUES (%s, %s) RETURNING id, managed_by_manager;", (chat_id_str, name))
        client = cur.fetchone()
    client_id, managed_by_manager = client
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ
    cur.execute("INSERT INTO tg_messages (client_id, message_text, sender_is_bot, is_voice) VALUES (%s, %s, FALSE, TRUE);", (client_id, "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"))
    
    voice_content = get_file_content(file_id)
    if not voice_content:
        return

    if chat_id_str == MANAGER_CHAT_ID: # –ï—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ
        cur.execute("SELECT chat_id FROM tg_clients WHERE managed_by_manager = TRUE;")
        active_client = cur.fetchone()
        if active_client:
            send_voice_message(voice_content, active_client[0])
    else: # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ
        caption = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {name} (`{chat_id_str}`)"
        send_voice_message(voice_content, MANAGER_CHAT_ID, caption)

    conn.commit()
    cur.close()
    conn.close()


# --- WEBHOOK ENDPOINT ---
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç
        if 'message' in data and 'text' in data['message']:
            chat_id = data['message']['chat']['id']
            chat_id_str = str(chat_id)
            message_text = data['message']['text']
            user_name = data['message']['from'].get('first_name', 'User')

            if chat_id_str == MANAGER_CHAT_ID:
                process_manager_command(message_text, chat_id_str)
            else:
                process_client_message(message_text, chat_id_str, user_name)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≥–æ–ª–æ—Å
        elif 'message' in data and 'voice' in data['message']:
            chat_id = data['message']['chat']['id']
            chat_id_str = str(chat_id)
            user_name = data['message']['from'].get('first_name', 'User')
            file_id = data['message']['voice']['file_id']
            
            process_voice_message(file_id, chat_id_str, user_name)

        return jsonify(status="ok"), 200
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return jsonify(status="error"), 500

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–∞ Render
init_db()

if __name__ == "__main__":
    # –≠—Ç–∞ —á–∞—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ (python telegram_bot.py)
    # –ù–∞ Render –æ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É init_db() –≤—ã–Ω–µ—Å–µ–Ω –≤—ã—à–µ
    app.run(debug=True, port=5001)
