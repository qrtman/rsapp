import os
import json
import requests
import psycopg2
from functools import wraps

from flask import Flask, request, jsonify
from dotenv import load_dotenv

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
app = Flask(__name__)
load_dotenv()

TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")
MANAGER_CHAT_ID = os.environ.get("MANAGER_CHAT_ID")
MANAGER_PASSWORD = os.environ.get("MANAGER_PASSWORD")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
if not all([TELEGRAM_BOT_TOKEN, DATABASE_URL, MANAGER_CHAT_ID, MANAGER_PASSWORD]):
    raise ValueError("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN, DATABASE_URL, MANAGER_CHAT_ID, MANAGER_PASSWORD –Ω–∞ Render.")

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
manager_sessions = {} # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Ö–æ–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# --- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    conn = psycopg2.connect(DATABASE_URL)
    return conn

def init_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
        cur.execute('''
            CREATE TABLE IF NOT EXISTS tg_clients (
                id SERIAL PRIMARY KEY,
                chat_id VARCHAR(50) UNIQUE NOT NULL,
                name VARCHAR(100),
                status VARCHAR(50) DEFAULT 'new',
                managed_by_manager BOOLEAN DEFAULT FALSE,
                dialog_step VARCHAR(50) DEFAULT 'start',
                budget VARCHAR(100),
                car_type VARCHAR(100)
            );
        ''')
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        cur.execute('''
            CREATE TABLE IF NOT EXISTS tg_messages (
                id SERIAL PRIMARY KEY,
                client_id INTEGER REFERENCES tg_clients(id),
                message_text TEXT,
                sender_is_bot BOOLEAN,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        ''')
        conn.commit()
        cur.close()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def send_telegram_message(text, chat_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API."""
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(TELEGRAM_API_URL, headers=headers, data=json.dumps(payload))
        response.raise_for_status()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if e.response: print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram: {e.response.text}")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ---
def process_chat_message(message_body, chat_id, name):
    conn = get_db_connection()
    cur = conn.cursor()
    chat_id_str = str(chat_id)

    # --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê ---
    if chat_id_str == MANAGER_CHAT_ID:
        if message_body.lower().startswith('/login '):
            pwd = message_body.split(' ', 1)[1]
            if pwd == MANAGER_PASSWORD:
                manager_sessions[chat_id_str] = {"logged_in": True}
                send_telegram_message("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n`/list`\n`/takeover <chat_id>`", chat_id_str)
            else:
                send_telegram_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.", chat_id_str)
        
        elif not manager_sessions.get(chat_id_str, {}).get("logged_in"):
            send_telegram_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ: `/login <–ø–∞—Ä–æ–ª—å>`", chat_id_str)
        
        elif message_body.lower() == '/list':
            cur.execute("SELECT name, chat_id, status FROM tg_clients ORDER BY id DESC LIMIT 10;")
            clients = cur.fetchall()
            reply = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n" if clients else "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç."
            for client in clients:
                reply += f"üë§ *{client[0]}*\nüìû `{client[1]}`\nüí° –°—Ç–∞—Ç—É—Å: {client[2]}\n\n"
            send_telegram_message(reply, chat_id_str)

        elif message_body.lower().startswith('/takeover '):
            try:
                client_to_manage = message_body.split(' ', 1)[1]
                # –°–Ω–∞—á–∞–ª–∞ "–æ—Ç–ø—É—Å–∫–∞–µ–º" –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —á–∞—Ç—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
                cur.execute("UPDATE tg_clients SET managed_by_manager = FALSE RETURNING chat_id, name;")
                released_clients = cur.fetchall()
                
                # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                cur.execute("UPDATE tg_clients SET managed_by_manager = TRUE WHERE chat_id = %s RETURNING name;", (client_to_manage,))
                client_name = cur.fetchone()
                
                if client_name:
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                    send_telegram_message(f"–í—ã –≤–∑—è–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º —Å {client_name[0]} (`{client_to_manage}`). –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É.", chat_id_str)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    send_telegram_message("–ö –≤–∞–º –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.", client_to_manage)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
                    for r_client in released_clients:
                        if r_client[0] != client_to_manage:
                           send_telegram_message("–ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –í–∞–º —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ—Ç.", r_client[0])
                else: 
                    send_telegram_message("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º `chat_id` –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id_str)
            except IndexError:
                send_telegram_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/takeover <chat_id>`", chat_id_str)

        else: # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
            cur.execute("SELECT chat_id FROM tg_clients WHERE managed_by_manager = TRUE;")
            active_client = cur.fetchone()
            if active_client:
                client_chat_id = active_client[0]
                send_telegram_message(message_body, client_chat_id)
            else: 
                send_telegram_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/takeover <chat_id>`.", chat_id_str)
        
        conn.commit()
        cur.close()
        conn.close()
        return

    # --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê ---
    cur.execute("SELECT id, dialog_step, managed_by_manager FROM tg_clients WHERE chat_id = %s;", (chat_id_str,))
    client = cur.fetchone()
    if not client:
        cur.execute("INSERT INTO tg_clients (chat_id, name) VALUES (%s, %s) RETURNING id, dialog_step, managed_by_manager;", (chat_id_str, name))
        client = cur.fetchone()
    client_id, dialog_step, managed_by_manager = client

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î
    cur.execute("INSERT INTO tg_messages (client_id, message_text, sender_is_bot) VALUES (%s, %s, %s);", (client_id, message_body, False))

    if managed_by_manager:
        # –ï—Å–ª–∏ —á–∞—Ç –≤–µ–¥–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ
        manager_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {name} (`{chat_id_str}`):\n\n{message_body}"
        send_telegram_message(manager_message, MANAGER_CHAT_ID)
    else:
        # –ï—Å–ª–∏ —á–∞—Ç –≤–µ–¥–µ—Ç –±–æ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ —à–∞–≥–∞–º –¥–∏–∞–ª–æ–≥–∞
        user_input = message_body.lower().strip()
        reply_text = ""
        
        if dialog_step == 'start':
            reply_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –ö–æ—Ä–µ–∏. –ù–∞—á–Ω–µ–º? (–î–∞/–ù–µ—Ç)"
            cur.execute("UPDATE tg_clients SET dialog_step = 'ask_budget' WHERE id = %s;", (client_id,))
        
        elif dialog_step == 'ask_budget':
            if user_input == '–¥–∞':
                reply_text = "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25000)"
                cur.execute("UPDATE tg_clients SET dialog_step = 'get_budget' WHERE id = %s;", (client_id,))
            else:
                reply_text = "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ."
                cur.execute("UPDATE tg_clients SET dialog_step = 'start' WHERE id = %s;", (client_id,))
        
        elif dialog_step == 'get_budget':
            if user_input.isdigit():
                reply_text = "–ü—Ä–∏–Ω—è—Ç–æ. –ö–∞–∫–æ–π —Ç–∏–ø –∫—É–∑–æ–≤–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–µ–¥–∞–Ω, –ö—Ä–æ—Å—Å–æ–≤–µ—Ä, –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫)"
                cur.execute("UPDATE tg_clients SET budget = %s, dialog_step = 'get_car_type' WHERE id = %s;", (user_input, client_id))
            else:
                reply_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏."
        
        elif dialog_step == 'get_car_type':
            cur.execute("SELECT budget FROM tg_clients WHERE id = %s;", (client_id,))
            budget = cur.fetchone()[0]
            reply_text = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω:\n\n*–¢–∏–ø –∞–≤—Ç–æ*: {message_body}\n*–ë—é–¥–∂–µ—Ç*: –¥–æ ${budget}\n\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
            cur.execute("UPDATE tg_clients SET car_type = %s, dialog_step = 'done', status = 'completed' WHERE id = %s;", (message_body, client_id))

        if reply_text:
            send_telegram_message(reply_text, chat_id_str)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
            cur.execute("INSERT INTO tg_messages (client_id, message_text, sender_is_bot) VALUES (%s, %s, %s);", (client_id, reply_text, True))

    conn.commit()
    cur.close()
    conn.close()

# --- WEBHOOK ENDPOINT ---
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    try:
        data = request.get_json()
        if 'message' in data and 'text' in data['message']:
            chat_id = data['message']['chat']['id']
            message_text = data['message']['text']
            user_name = data['message']['from'].get('first_name', 'User')
            process_chat_message(message_text, chat_id, user_name)
        return jsonify(status="ok"), 200
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return jsonify(status="error"), 500

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    init_db()
    # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Render —ç—Ç–∞ —á–∞—Å—Ç—å –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É init_db() –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
    app.run(debug=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–∞ Render
init_db()
